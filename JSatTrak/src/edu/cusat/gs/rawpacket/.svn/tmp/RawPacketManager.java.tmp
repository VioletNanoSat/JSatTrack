package edu.cusat.gs.rawpacket;

import java.io.File;
import java.util.ArrayList;

import javax.swing.JTabbedPane;

import jsattrak.gui.JSatTrak;

import org.joda.time.LocalDateTime;

import edu.cusat.gs.gui.PacketDisplay;
import edu.cusat.gs.gui.PacketLogViewerPanel;
import edu.cusat.gs.gui.RawPacketViewerPanel;
import edu.cusat.gs.gui.RfGatewayPanel;

public class RawPacketManager {

	private JSatTrak app;
	private PacketLogger packetLog;
	private ArrayList<PacketDisplay> viewers;
	private ArrayList<PacketDisplay> loggers;
	private String name;
    public Packet mostRecentPacket;	
    public Boolean displayMostCurPacket = true;
	
	private JTabbedPane parent;
	
	/**
     * LogFile to be written to
     */
    public final File directory;  // = new File("data/packets"); 
	
    /**
     * Constructor
     * @param parent - GroundSystems Panel object
     * @param name - Listener Name (Spacecraft name i.e."TOPTOP")
     */
	public RawPacketManager(JSatTrak app, JTabbedPane parent, String name) {
		this.app = app;
		this.directory = new File(RfGatewayPanel.DIRECTORY + "/" + name);
		this.packetLog = new PacketLogger(directory);
		this.name = name;
		
		this.parent = parent;
		
		viewers = new ArrayList<PacketDisplay>();
		loggers = new ArrayList<PacketDisplay>();
	}	
	
	/**
	 * Returns Name of Listener
	 */
	@Override public String toString() { return name; }
	
	/**
	 * Creates a single PacketViewerPanel, if one is already created, gives this tab focus
	 * @return
	 */
	public boolean createPacketViewerTab () {		
		if (viewers.size() == 0) {
			//Create internal components
			RawPacketViewerPanel pv = new RawPacketViewerPanel(this, parent.getTabCount());
			PacketDisplay newTab = new PacketDisplay(this, pv, pv.getTabIndex()); 
			
			//Add to ArrayList of all log viewers (Currently this only supports one)
			viewers.add(newTab);
			
			//Try to add the tab to the GroundSystemsPanel
			try { 
				parent.addTab(newTab.toString(), newTab); 
				parent.setSelectedIndex(newTab.getTabIndex()); 	
			}
			catch (IndexOutOfBoundsException e) { return false; }
			
			//If the is a most recent packet, update the GUI
			if (mostRecentPacket != (null))
				(newTab).printPacket(mostRecentPacket);
			
			return true;
		}
		else
			try { parent.setSelectedIndex(viewers.get(0).getTabIndex()); }
			catch (IndexOutOfBoundsException e) { }
			return false;			
	}
	
	/**
	 * Removes PacketViewerPanels for this connection
	 */
	public boolean removePacketViewerTabs() {
		if (viewers.size() > 0) {
			parent.remove(viewers.get(0));
			viewers.clear();
			for (PacketDisplay pd : loggers) {
				parent.remove(pd);
			}
			return true;
		}
		else
			return false;
	}
	
	/**
	 * Creates a Packet Log Viewer Tab, gives it focus
	 * @return
	 */
	public boolean createPacketLogViewerTab () {
		//Create internal components
		PacketLogViewerPanel plv = new PacketLogViewerPanel(this, packetLog, parent.getTabCount(), loggers.size());		
		PacketDisplay newTab = new PacketDisplay(this, plv, plv.getTabIndex()); 
		
		//Update with current info
		newTab.updateControlBox(packetLog.getLogFiles());
		
		//Add to the Arraylist of all loggers
		loggers.add(newTab);
		
		try { 
			parent.addTab(newTab.toString(), newTab); 
			parent.setSelectedIndex(newTab.getTabIndex()); 
		}
		catch (IndexOutOfBoundsException e) { return false; }
		
		return true;
	}	
	
	/**
	 * Delete Logger Tab
	 * @param pcktDis
	 */
	public void closeLogger(PacketDisplay display) {
		int index = loggers.indexOf(display);
		loggers.set(index, null);
		
		for (PacketDisplay pcktDis : loggers) {
			if (pcktDis != null && pcktDis.getTabIndex() > index)
				pcktDis.decrementTabIndex();
		}
		
		parent.remove(display.getTabIndex());	
	}
	
	/**
	 * Most recent packet
	 */
    public void setMostRecentPacket(Packet p) { 
    	mostRecentPacket = p; 
    	
    	//If the packets are "paused" on the viewer, don't update GUI
    	if (displayMostCurPacket)
    		for (PacketDisplay c : viewers)
    			if (c != null)
    				c.printPacket(mostRecentPacket);
    	
    	//Always update Loggers
		for (PacketDisplay c : loggers)
			if (c != null)
				c.updateControlBox(packetLog.getLogFiles());
	    	
    }
    
    /**
     * Getter for the most recent packet
     * @return
     */
    public Packet getMostRecentPacket() { return mostRecentPacket; }
    
    /**
     * Clear Table (will be true until action completed, then returned to the default value: false)
     */
    public void clearTable(int index) { 
    	loggers.get(index).clearJTableLog();
    }
        
    /**
     * Override for default display of the most current packet
     */
    public void setDisplayMostCurPacket(boolean b) { 
    	displayMostCurPacket = b;
    	
    	//When unpaused, update the viewer GUI's the most recent packet
    	if (displayMostCurPacket && getMostRecentPacket() != null) 
    		setMostRecentPacket(getMostRecentPacket());
    }
    
    /**
     * Returns which the most current packet is displayed in the viewer tab
     * @return
     */
	public Boolean getDisplayMostCurPacket() { return displayMostCurPacket; }
    
    /**
     * Packet to be displayed from a log 
     */
	public void printPacketToLog(Packet packetFromLog, int index) { 
		loggers.get(index).printPacket(packetFromLog);
	}
	
	/**
     * Adds packet to electronic log in this class, at the current real/sim time
     * @return success
     */
    public boolean addPacket(byte[] b, boolean addToLog) {
    	return addPacket(b, new LocalDateTime(), app == null ? new LocalDateTime() : app.getCurrentJulianDate().toDateTime().toLocalDateTime(), addToLog);    	
    }
	
	/**
     * Adds packet to electronic log in this class
     * @return success
     */
    public boolean addPacket(byte[] b, LocalDateTime systemTime, LocalDateTime simTime, boolean addToLog) {
    	return addPacket(new Packet(b, systemTime, simTime), addToLog);    	
    }
	
	/**
     * Adds packet to electronic log in this class
     * @param pckt
     * @return true if not paused, false if paused
     */
    public boolean addPacket(Packet pckt, boolean addToLog) {  	
    	boolean out = true;
    	
    	//Add to txt file logs
    	if (addToLog) {
      		out = (packetLog.logPacket(pckt));
<<<<<<< .mine
      		boolean out_2 = (passLog.logPass());
      		out = out || out_2;
    	}			
=======
    	}
>>>>>>> .r6606
    	
    	//update GUI's
    	setMostRecentPacket(pckt);    	
    	
    	return out;
    }   
}
