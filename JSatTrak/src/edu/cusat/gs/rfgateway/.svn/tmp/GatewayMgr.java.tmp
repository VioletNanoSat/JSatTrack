package edu.cusat.gs.rfgateway;

import java.io.IOException;
import java.net.ServerSocket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JTabbedPane;

import jsattrak.gui.JSatTrak;

import org.joda.time.LocalDateTime;

import edu.cusat.common.utl.FakeSerialPort;
import edu.cusat.common.utl.gsl.GslConsts;
import edu.cusat.common.utl.gsl.PacketData;
import edu.cusat.gs.gui.PacketDisplay;
import edu.cusat.gs.rawpacket.Packet;
import edu.cusat.gs.rawpacket.RawPacketManager;
import gnu.io.CommPortIdentifier;
import gnu.io.NoSuchPortException;
import gnu.io.PortInUseException;
import gnu.io.UnsupportedCommOperationException;

public class GatewayMgr {

	/** The possible states of a server. **/
	public enum ServerStatus {
		/** The server is not connected nor listening for connections **/
		DEAD,
		/** The server is blocking on {@link ServerSocket#accept()} **/
		WAITING,
		/** The server is connected to InControl **/
		RUNNING;
	}

	/** The active gateways, keyed by their Callsign **/
	private Map<Callsign, SatTcpProvider> servers = new HashMap<Callsign, SatTcpProvider>();
	/** To use with RawPacketManagers **/
	private JSatTrak app = null;

	public void setJSatTrak(JSatTrak pane) {
		this.app = pane;
	}

	/** To use with RawPacketManagers **/
	private JTabbedPane tabpane = null;

	public void setTabbedPane(JTabbedPane pane) {
		tabpane = pane;
	}

	protected RawPacketManager createRawPacketManager(String name) {
		if (tabpane == null) {
			return new RawPacketManager(null, null, null) {

				@Override
				public boolean addPacket(byte[] b, boolean addToLog) {
					return true;
				}

				@Override
				public boolean addPacket(byte[] b, LocalDateTime systemTime,
						LocalDateTime simTime, boolean addToLog) {
					return true;
				}

				@Override
				public boolean addPacket(Packet pckt, boolean addToLog) {
					return true;
				}

				@Override
				public void clearTable(int index) {
				}

				@Override
				public void closeLogger(PacketDisplay display) {
				}

				@Override
				public boolean createPacketLogViewerTab() {
					return true;
				}

				@Override
				public boolean createPacketViewerTab() {
					return true;
				}
			};
		}
		RawPacketManager rpm = new RawPacketManager(app, tabpane, name);
		rpm.createPacketViewerTab();
		return rpm;
	}
	
	

	// //////////////////////////////// TCP Stuff
	// //////////////////////////////////
	/**
	 * Opens a server to start waiting for an InControl connection
	 * 
	 * @param call
	 *            the callsign to add to each transmission. Must be unique among
	 *            all open servers, as it is used to locate each one. If it is
	 *            not, then the existing server will be closed, and a new one
	 *            opened to replace it.
	 * @param cmdPort
	 *            the TCP port to listen for InControl's Command Gateway on
	 * @param tlmPort
	 *            the TCP port to listen for InControl's Telemetry Gateway on
	 * @return <code>true</code> if successful, <code>false</code> otherwise
	 */
	public boolean openServer(Callsign call, int cmdPort, int tlmPort) {
		// If we have the server connected, disconnect first
		if (servers.containsKey(call) && !closeServer(call)) {
			notifyListeners(call, "Server already connected. Could not close.");
			return false;
		}
		// Give the TCP connection 300ms to destroy
		try {
			Thread.sleep(300);
		} catch (InterruptedException e1) {
			// wont ever get here.. i dont think
			e1.printStackTrace();
		}
		try {
			if (servers.put(call, new SatTcpProvider(this, call, cmdPort, tlmPort)) == null){
				// If successfully added
				notifyTcpOfTncConnection(call);
				servers.get(call).start();
			}
			return true;
		} catch (IOException e) {
			notifyListeners("", e.getMessage());
		}
		return false;
	}

	/**
	 * Returns the status of a particular telemetry server
	 * 
	 * @param call
	 *            The callsign of the telemetry server
	 */
	public ServerStatus tlmStatus(Callsign call) {
		if (servers.containsKey(call)) {
			return servers.get(call).tlmStatus();
		}
		return ServerStatus.DEAD;
	}

	private void notifyTcpOfTncConnection(Callsign call) {
		SatTcpProvider tcp = servers.get(call);
		if (tnc != null) {
			// tnc.registerTlmServer(tcp)
			tcp.notifyOfTncConnection(tnc);
		}
		if (topSim != null && call.toString().matches("TOP.*")) {
			// topSim.registerTlmServer(tcp);
			tcp.notifyOfTncConnection(topSim);
		}
		if (botSim != null && call.toString().matches("BOT.*")) {
			// botSim.registerTlmServer(tcp);
			tcp.notifyOfTncConnection(botSim);
		}
	}

	/**
	 * Returns the status of a particular command server
	 * 
	 * @param call
	 *            The callsign of the command server
	 */
	public ServerStatus cmdStatus(Callsign call) {
		if (servers.containsKey(call)) {
			return servers.get(call).cmdStatus();
		}
		return ServerStatus.DEAD;
	}

	/**
	 * Close a server
	 * 
	 * @param call
	 *            The callsign of the server to close
	 * @return Whether the server is closed
	 */
	public boolean closeServer(Callsign call) {
		if (servers.containsKey(call)) {
			SatTcpProvider stp = servers.get(call);
			stp.shutdown();
			if (stp.tlmStatus() == ServerStatus.DEAD
					&& stp.cmdStatus() == ServerStatus.DEAD) {
				servers.remove(call);
				return true;
			}
			return false;
		}
		return true;
	}

	/**
	 * Gets a list of strings representing all servers currently waiting for a
	 * connection
	 */
	public List<String> allServersThatAre(ServerStatus stat) {
		List<String> ret = new ArrayList<String>();
		for (Callsign call : servers.keySet()) {
			if (servers.get(call).cmdStatus() == stat) {
				ret.add(call + "(cmd)");
			}
			if (servers.get(call).tlmStatus() == stat) {
				ret.add(call + "(tlm)");
			}
		}
		return ret;
	}

	// //////////////////////////////// TNC Stuff
	// //////////////////////////////////
	/** The connection to the actual hardware **/
	private TncProvider tnc = null;

	/**
	 * Connect to a hardware TNC (or possibly a fake one)
	 * 
	 * @param port
	 *            The ID of the port (or {@link FakeSerialPort#getFakeId()}
	 * @param tncType
	 *            Whether it's a KAM-XL or TH-D7
	 */
	public boolean connectToTNC(CommPortIdentifier port,
			TncSerialProvider.Type tncType) {
		try {
			tnc = new TncSerialProvider(this, port, tncType);
			for (SatTcpProvider stp : servers.values()) {
				notifyTcpOfTncConnection(stp.getCall());
			}
			return true;
		} catch (UnsupportedCommOperationException e) {
			notifyListeners("TNC", "Invalid serial settings: %s",
					e.getMessage());
		} catch (IOException e) {
			notifyListeners("TNC", "IO Exception: " + e.getMessage());
		} catch (PortInUseException e) {
			notifyListeners("TNC", "Port already in use by " + e.getMessage());
		}
		return false;
	}

	public void resetTNC(TncSerialProvider.Type tncType) {
		try {
			tnc.resetTNC(tncType);
		} catch (IOException e) {
			notifyListeners("TNC", "IO Exception: " + e.getMessage());
		}

	}

	public ServerStatus tncStatus() {
		if (tnc != null) {
			return tnc.connected ? ServerStatus.RUNNING : ServerStatus.DEAD;
		}
		return ServerStatus.DEAD;
	}

	public void disconnectTNC() {
		for (SatTcpProvider stp : servers.values()) {
			stp.notifyOfTncDisconnection();
		}
		if (tnc != null) {
			tnc.disconnect();
			tnc = null;
		}
	}
	
	public TncProvider getTNC(){
		return tnc;
	}

	// ////////////////////////////////Sim Stuff
	// //////////////////////////////////
	/** The server for Top's simulator **/
	private SimServer topSim = null;
	/** The server for Bottom's simulator **/
	private SimServer botSim = null;

	public boolean connectToSim(int topCmdPort, int topTlmPort, int botCmdPort,
			int botTlmPort) {
		try {
			topSim = new SimServer(this, new Callsign("SIMTOP"), topCmdPort,
					topTlmPort).start();
			botSim = new SimServer(this, new Callsign("SIMBOT"), botCmdPort,
					botTlmPort).start();
			notifyTcpOfTncConnection(topSim.getCall());
			notifyTcpOfTncConnection(botSim.getCall());
			return true;
		} catch (NoSuchPortException e) {
			e.printStackTrace();
		} catch (UnsupportedCommOperationException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}

	public ServerStatus simStatus() {
		if (topSim != null && botSim != null) {
			// If any are dead, return dead
			if (topSim.status() == ServerStatus.DEAD
					|| botSim.status() == ServerStatus.DEAD) {
				return ServerStatus.DEAD;
			} else if (topSim.status() == ServerStatus.WAITING
					|| botSim.status() == ServerStatus.WAITING) {
				// Otherwise if any are waiting, return waiting
				return ServerStatus.WAITING;
			} else {
				return ServerStatus.RUNNING;
			}
		}
		return ServerStatus.DEAD;
	}

	public void disconnectSim() {
		for (SatTcpProvider stp : servers.values()) {
			stp.notifyOfTncDisconnection();
		}
		if (topSim != null) {
			topSim.disconnect();
			topSim = null;
		}
		if (botSim != null) {
			botSim.disconnect();
			botSim = null;
		}
	}

	// ///////////////////////////// AutoBeacon Stuff
	// ///////////////////////////////
	public boolean startAutoBecaon(Callsign call, double rate, boolean morse) {
		return false;
	}

	public void stopAutoBeacon() {
	}

	// ////////////////////////// Dealing with Listeners
	// ////////////////////////////
	/** Everybody interested in what happens to Gateways **/
	private List<GatewayMgrListener> listeners = new ArrayList<GatewayMgrListener>();

	/** Adds a listener to be notified of any important events that happen **/
	public void registerListener(GatewayMgrListener l) {
		listeners.add(l);
	}

	/** Removes a listener **/
	public void unregisterListener(GatewayMgrListener l) {
		listeners.remove(l);
	}

	/** Send a message to all listeners **/
	protected void notifyListeners(Callsign call, String msg, Object... args) {
		notifyListeners(call.toString(), msg, args);
	}

	protected void notifyListeners(String who, String msg, Object... args) {
		String toSend = (who == null ? "" : who + ": ")
				+ String.format(msg, args);
		for (GatewayMgrListener listener : listeners) {
			listener.eventOccurred(toSend);
		}
	}

	// ////////////////////////// Message passing ////////////////////////////
	// Protected methods for sending messages b/t the two sides, so that
	// it's the GwyMgr that buffers and syncs if necessary?
	protected void sendToSim(Callsign destCall, byte[] message) {
		if (topSim != null && destCall.toString().matches("TOP.*")) {
			topSim.send(message);
		}
		if (botSim != null && destCall.toString().matches("BOT.*")) {
			botSim.send(message);
		}
	}

	protected void sendToTnc(Callsign call, PacketData data) {
		tnc.send(call, Callsign.GROUND, data);
	}

	public void tncTxTest() {
		if (tncStatus() != ServerStatus.DEAD) {
			byte[] testPkt = new byte[316];
			//String txDataStr = "Callsign KC2UGM Testing 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabdefghijklmnopqrstuvwxyz!@#$%^&*()-_=+[]";
<<<<<<< .mine
			byte[] txData = {127,-128,-64,-37,-64,-37,-64,-37,-64,-37,-64,-37,-64,-37,-64,-37,1,1,1,1,1,1}; // -64 is C0 and -37 is DB
=======
			byte[] txData = {127,-128,-64,1,1,1,1,1,1}; // -64 is C0 and -37 is DB
>>>>>>> .r6605
					//txDataStr.getBytes();
			//byte[] rand = new byte[316-2*Callsign.length()];
			//Random R = new Random();
			//R.nextBytes(rand);
			// Write DEST
			System.arraycopy(Callsign.TOP.toArray(true), 0, testPkt, 0,
					Callsign.length());
			// Write SRC
			System.arraycopy(Callsign.GROUND.toArray(false), 0, testPkt,
					Callsign.length(), Callsign.length());
			System.arraycopy(txData, 0, testPkt,
					2*Callsign.length(), txData.length); //316-2*Callsign.length());
			tnc.send(testPkt);
		}
	}

	public void tncRxTest() {
		if (tncStatus() != ServerStatus.DEAD) {
			byte[] testPkt = new byte[319];
			System.arraycopy(Callsign.GROUND.toArray(true), 0, testPkt, 0,
					Callsign.length());
			System.arraycopy(Callsign.TOP.toArray(false), 0, testPkt, Callsign
					.length(), Callsign.length());
			tnc.receive(testPkt);
		}
	}
	
	public boolean send(Callsign c, PacketData pd){
		if(tncStatus() != ServerStatus.DEAD){
			return tnc.send(c, pd);
		}
		return false;
	}
}