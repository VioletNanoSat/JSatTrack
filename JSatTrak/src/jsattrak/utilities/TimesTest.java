package jsattrak.utilities;

import static org.junit.Assert.*;

import java.util.TimeZone;

import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.LocalDateTime;
import org.junit.Test;

/**
 * Tests the various dateTimeOfMjd functions by taking a Modified Julian day and
 * the corresponding calendar date. 
 * <p>
 * 
 */
public class TimesTest {
    
	/** 
     * Test times, generated by 
     * http://heasarc.gsfc.nasa.gov/cgi-bin/Tools/xTime/xTime.pl 
     **/
    private static MjdDateTimePair[] testtimes = new MjdDateTimePair[]{
        new MjdDateTimePair( 54466.00000000, 2008,  1,  1,  0,  0, 0  ),
        new MjdDateTimePair( 55167.78759000, 2009, 12,  2, 18, 54, 8  ),
        new MjdDateTimePair( 49824.19105000, 1995,  4, 17,  4, 35, 7  ),
        new MjdDateTimePair( 54524.78759000, 2008,  2, 28, 18, 54, 8  ),
        new MjdDateTimePair( 54526.57130000, 2008,  3,  1, 13, 42, 40 ),
        new MjdDateTimePair( 40587.00000000, 1970,  1,  1,  0,  0, 0  ),
        new MjdDateTimePair( 55411.89101852, 2010,  8,  3, 21, 23,04  )
    };

	private static Duration ONE_SEC = Duration.standardSeconds(1L);
		
	@Test
	public void testDateTimeOfMjd() {
	    for ( int i = 0; i < testtimes.length; i++ ) {
            assertEquals( Times.dateTimeOfMjd( testtimes[i].mjd ), testtimes[i].dt );
        }
	}
	
    private void assertEquals( LocalDateTime actDate, LocalDateTime expDate ) {
        Duration diff = new Duration( actDate.toDateTime( DateTimeZone.UTC ),
                expDate.toDateTime( DateTimeZone.UTC ) );
        assertTrue( "Off by " + diff + ". Expected [" + expDate + "], was ["
                + actDate + "]", diff.isShorterThan( ONE_SEC ) );
    }

	private static class MjdDateTimePair {
	    private final double mjd;
	    private final LocalDateTime dt;
	    public MjdDateTimePair( double mjd, LocalDateTime dt ) {
	        this.mjd = mjd; this.dt = dt;
        }
        public MjdDateTimePair( double mjd, int y, int m, int d, int h, int mi,
                int s ) {
            this( mjd, new LocalDateTime( y, m, d, h, mi, s, 0 ) );
        }
	}
}
